package generator

import org.ldemetrios.utilities.cast
import parsers.*
import java.io.File
import java.util.*

fun kebabToTitleCamel(string: String): String {
    val words = string.split(".").last().split("-")
    val result = StringBuilder()
    for (word in words) {
        result.append(word.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() })
    }
    return result.toString()
}

fun kebabToLowerCamel(string: String): String {
    val x =
        kebabToTitleCamel(string).replaceFirstChar { if (it.isUpperCase()) it.lowercase(Locale.getDefault()) else it.toString() }
    return when (x) {
        "class" -> "clazz"
        "sub" -> "subscript"
        "super" -> "superscript"
        else -> x
    }
}

fun genericParametersOfUnion(union: Set<String>, allGenerics: List<ConcreteType>): List<TypeParameter> {
    val genericParametersOfUnion = mutableListOf<TypeParameter>()
    for (variant in union) {
        val generic = allGenerics.find { it.name == variant }
        if (generic == null) continue
        genericParametersOfUnion.addAll(generic.params)
    }
    return genericParametersOfUnion
}

sealed interface ThemeConfigurationTree {
    val name: String
}

data class Leaf(override val name: String, val type: String) : ThemeConfigurationTree
data class Subtree(
    override val name: String,
    val children: MutableMap<String, ThemeConfigurationTree> = mutableMapOf()
) :
    ThemeConfigurationTree {
    override fun toString(): String = "$name subtree of Theme Configurator"
}

fun generate(
    pack: String,
    location: String,
    parameters: List<Parameter>,
    virtuals: List<String>
) {
    val imports = """
         |import org.ldemetrios.typst4k.rt.*
         |import org.ldemetrios.typst4k.orm.*
         |import org.gradle.api.provider.Property
         |import org.gradle.api.tasks.Nested
         |import org.gradle.api.provider.ListProperty
    """.trimMargin()
    val themeConfigurator = Subtree("Theme")

    for (parameter in parameters) {
        var subtree = themeConfigurator
        for (part in parameter.name.dropLast(1)) {
            val child = subtree.children[part]
            if (child == null) {
                subtree.children[part] = Subtree(subtree.name + "." + part)
                subtree = subtree.children[part] as Subtree
            } else {
                subtree = child as? Subtree ?: throw AssertionError("$part of $subtree is already a leaf")
            }
        }
        if (subtree.children[parameter.name.last()] != null) {
            throw AssertionError("$parameter is already exists")
        }
        subtree.children[parameter.name.last()] = Leaf(parameter.name.joinToString("."), parameter.type.toCode())
    }

    writeConfig(themeConfigurator, pack, imports, location, true)

    run { // Init conventions
        val code = StringBuilder("package $pack\n\n$imports\n\n")
        code.append("fun GeneralThemeConfigurator.setConventions() {\n")
        for (parameter in parameters) {
            fun List<String>.asName() = joinToString(".") { kebabToLowerCamel(it) }
            if (parameter.convention != null) {
                code.append("    ${parameter.name.asName()}.convention(${parameter.convention.asName()})\n")
            } else {
//                code.append("    ${parameter.name.joinToString(".")}.convention(null)\n")
            }
        }
        code.append("}\n")

        File(
            "$location/Conventions.kt"
        ).run {
            parentFile.mkdirs()
            writeText(code.toString())
        }
    }

    run { // Generate set rule... generator
        val code = StringBuilder("package $pack\n\n$imports\n\n")
        code.append(
            """
           |fun GeneralThemeConfigurator.generateRule() : String {
           |    val code = StringBuilder()
           |    code.append("// Generated by typst4gradle\n")
           |    code.append("#let theme = (body) => [\n")
        """.trimMargin()
        )
        code.append("\n")
        for (parameter in parameters) {
            val name = parameter.name.joinToString(".")
            val namePrefix = parameter.name.dropLast(1).joinToString(".")
            val lastPart = parameter.name.last()
            val kotlinName = parameter.name.joinToString(".") { kebabToLowerCamel(it) }
            if (virtuals.any { name.startsWith(it) }) continue

            code.append("""    $kotlinName.orNull?.let { code.append("  #set $namePrefix($lastPart: ${"$"}{it.repr()})\n") }""")
            code.append("\n")
        }
        code.append(
            """
           |    code.append("  #body\n")
           |    code.append("]\n")
           |    return code.toString()
           |}
           |
           |private fun <E:TValue> List<E>.repr() = TArray(this).repr()
           |
        """.trimMargin()
        )

        File(
            "$location/SetRules.kt"
        ).run {
            parentFile.mkdirs()
            writeText(code.toString())
        }
    }
}

fun configName(config: Subtree) = config.name.split(".").joinToString("") { kebabToTitleCamel(it) }

fun writeConfig(themeConfigurator: Subtree, pack: String, imports: String, location: String, root: Boolean) {
    val code = StringBuilder()
    code.append("package $pack\n\n$imports\n\n")
    code.append("abstract class ")
    if (root) {
        code.append("GeneralThemeConfigurator")
    } else {
        code.append(configName(themeConfigurator))
        code.append("Configurator")
    }

    if (root) code.append(" @javax.inject.Inject constructor(val name: String)")
    code.append(" {\n")
    for ((part, child) in themeConfigurator.children) {
        when (child) {
            is Leaf -> {
                code.append("    abstract val ${kebabToLowerCamel(part)}: ")
//                if (child.type.startsWith("TArray<")) {
//                    code.append("ListProperty<${child.type.drop(7).dropLast(1)}>")
//                } else {
                    code.append("Property<${child.type}?>")
//                }
            }

            is Subtree -> {
                code.append("    @get:Nested abstract val ${kebabToLowerCamel(part)} : ${configName(child)}Configurator")
                writeConfig(child, pack, imports, location, false)
            }
        }
        code.append("\n")
    }
    code.append("}")
    File(
        if (root) "$location/GeneralThemeConfigurator.kt"
        else "$location/dsl/${configName(themeConfigurator)}Configurator.kt"
    ).run {
        parentFile.mkdirs()
        writeText(code.toString())
    }
}

private fun Type.toCode(): String = "T" + when (this) {
    is UnionType -> {
        val variants = this.flatten().variants.sortedBy { it.toString() }.map { it.cast<ConcreteType>() }
        var result = variants.joinToString("Or") { kebabToTitleCamel(it.name) }
        val parameters = variants.flatMap { it.params }
        if (parameters.isNotEmpty()) {
            result += "<" + parameters.joinToString(", ") { it.param.toCode() } + ">"
        }
        result
    }

    is ConcreteType -> {
        var result = kebabToTitleCamel(this.name)
        if (this.params.isNotEmpty()) {
            result += "<" + this.params.joinToString(", ") { it.param.toCode() } + ">"
        }
        result
    }

    is AnyType -> "Value"
}

fun <T> Set<T>.isSubsetOf(other: Set<T>) = this.all { it in other }

fun kindaMain(
    rootDir: String,
    datamodelFile: String = "$rootDir/themes",
    packageName: String = "org.ldemetrios.typst4gradle.themes",
) {
    val was = File(datamodelFile).readText()
    val clean = CommentsRemover(was).also { it.parse() }.result.toString()
    val parser = ModelParser(clean)
    parser.parse()

    generate(
        pack = packageName,
        location = "$rootDir/src/main/kotlin/org/ldemetrios/typst4gradle/themes",
        parameters = parser.parameters,
        listOf(
            "geometry",
            "foreground",
            "background",
        )
    )
}

