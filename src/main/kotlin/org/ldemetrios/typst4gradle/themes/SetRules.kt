package org.ldemetrios.typst4gradle.themes

import org.ldemetrios.typst4k.rt.*
import org.ldemetrios.typst4k.orm.*
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Nested
import org.gradle.api.provider.ListProperty

fun GeneralThemeConfigurator.generateRule() : String {
    val code = StringBuilder()
    code.append("// Generated by typst4gradle\n")
    code.append("#let theme = (body) => [\n")
    bibliography.title.orNull?.let { code.append("  #set bibliography(title: ${it.repr()})\n") }
    bibliography.full.orNull?.let { code.append("  #set bibliography(full: ${it.repr()})\n") }
    bibliography.style.orNull?.let { code.append("  #set bibliography(style: ${it.repr()})\n") }
    cite.supplement.orNull?.let { code.append("  #set cite(supplement: ${it.repr()})\n") }
    cite.form.orNull?.let { code.append("  #set cite(form: ${it.repr()})\n") }
    cite.style.orNull?.let { code.append("  #set cite(style: ${it.repr()})\n") }
    figure.placement.orNull?.let { code.append("  #set figure(placement: ${it.repr()})\n") }
    figure.caption.orNull?.let { code.append("  #set figure(caption: ${it.repr()})\n") }
    figure.kind.orNull?.let { code.append("  #set figure(kind: ${it.repr()})\n") }
    figure.supplement.orNull?.let { code.append("  #set figure(supplement: ${it.repr()})\n") }
    figure.numbering.orNull?.let { code.append("  #set figure(numbering: ${it.repr()})\n") }
    figure.gap.orNull?.let { code.append("  #set figure(gap: ${it.repr()})\n") }
    figure.outlined.orNull?.let { code.append("  #set figure(outlined: ${it.repr()})\n") }
    footnote.numbering.orNull?.let { code.append("  #set footnote(numbering: ${it.repr()})\n") }
    h.weak.orNull?.let { code.append("  #set h(weak: ${it.repr()})\n") }
    v.weak.orNull?.let { code.append("  #set v(weak: ${it.repr()})\n") }
    heading.level.orNull?.let { code.append("  #set heading(level: ${it.repr()})\n") }
    heading.depth.orNull?.let { code.append("  #set heading(depth: ${it.repr()})\n") }
    heading.offset.orNull?.let { code.append("  #set heading(offset: ${it.repr()})\n") }
    heading.numbering.orNull?.let { code.append("  #set heading(numbering: ${it.repr()})\n") }
    heading.supplement.orNull?.let { code.append("  #set heading(supplement: ${it.repr()})\n") }
    heading.outlined.orNull?.let { code.append("  #set heading(outlined: ${it.repr()})\n") }
    heading.bookmarked.orNull?.let { code.append("  #set heading(bookmarked: ${it.repr()})\n") }
    highlight.fill.orNull?.let { code.append("  #set highlight(fill: ${it.repr()})\n") }
    highlight.stroke.orNull?.let { code.append("  #set highlight(stroke: ${it.repr()})\n") }
    highlight.topEdge.orNull?.let { code.append("  #set highlight(top-edge: ${it.repr()})\n") }
    highlight.bottomEdge.orNull?.let { code.append("  #set highlight(bottom-edge: ${it.repr()})\n") }
    highlight.extent.orNull?.let { code.append("  #set highlight(extent: ${it.repr()})\n") }
    highlight.radius.orNull?.let { code.append("  #set highlight(radius: ${it.repr()})\n") }
    linebreak.justify.orNull?.let { code.append("  #set linebreak(justify: ${it.repr()})\n") }
    outline.title.orNull?.let { code.append("  #set outline(title: ${it.repr()})\n") }
    outline.target.orNull?.let { code.append("  #set outline(target: ${it.repr()})\n") }
    outline.depth.orNull?.let { code.append("  #set outline(depth: ${it.repr()})\n") }
    outline.indent.orNull?.let { code.append("  #set outline(indent: ${it.repr()})\n") }
    outline.fill.orNull?.let { code.append("  #set outline(fill: ${it.repr()})\n") }
    overline.stroke.orNull?.let { code.append("  #set overline(stroke: ${it.repr()})\n") }
    overline.offset.orNull?.let { code.append("  #set overline(offset: ${it.repr()})\n") }
    overline.extent.orNull?.let { code.append("  #set overline(extent: ${it.repr()})\n") }
    overline.evade.orNull?.let { code.append("  #set overline(evade: ${it.repr()})\n") }
    overline.background.orNull?.let { code.append("  #set overline(background: ${it.repr()})\n") }
    par.leading.orNull?.let { code.append("  #set par(leading: ${it.repr()})\n") }
    par.justify.orNull?.let { code.append("  #set par(justify: ${it.repr()})\n") }
    par.linebreaks.orNull?.let { code.append("  #set par(linebreaks: ${it.repr()})\n") }
    par.firstLineIndent.orNull?.let { code.append("  #set par(first-line-indent: ${it.repr()})\n") }
    par.hangingIndent.orNull?.let { code.append("  #set par(hanging-indent: ${it.repr()})\n") }
    quote.block.orNull?.let { code.append("  #set quote(block: ${it.repr()})\n") }
    quote.quotes.orNull?.let { code.append("  #set quote(quotes: ${it.repr()})\n") }
    quote.attribution.orNull?.let { code.append("  #set quote(attribution: ${it.repr()})\n") }
    raw.block.orNull?.let { code.append("  #set raw(block: ${it.repr()})\n") }
    raw.lang.orNull?.let { code.append("  #set raw(lang: ${it.repr()})\n") }
    raw.align.orNull?.let { code.append("  #set raw(align: ${it.repr()})\n") }
    raw.syntaxes.orNull?.let { code.append("  #set raw(syntaxes: ${it.repr()})\n") }
    raw.theme.orNull?.let { code.append("  #set raw(theme: ${it.repr()})\n") }
    raw.tabSize.orNull?.let { code.append("  #set raw(tab-size: ${it.repr()})\n") }
    ref.supplement.orNull?.let { code.append("  #set ref(supplement: ${it.repr()})\n") }
    smartquote.double.orNull?.let { code.append("  #set smartquote(double: ${it.repr()})\n") }
    smartquote.enabled.orNull?.let { code.append("  #set smartquote(enabled: ${it.repr()})\n") }
    smartquote.alternative.orNull?.let { code.append("  #set smartquote(alternative: ${it.repr()})\n") }
    smartquote.quotes.orNull?.let { code.append("  #set smartquote(quotes: ${it.repr()})\n") }
    strike.stroke.orNull?.let { code.append("  #set strike(stroke: ${it.repr()})\n") }
    strike.offset.orNull?.let { code.append("  #set strike(offset: ${it.repr()})\n") }
    strike.extent.orNull?.let { code.append("  #set strike(extent: ${it.repr()})\n") }
    strike.background.orNull?.let { code.append("  #set strike(background: ${it.repr()})\n") }
    strong.delta.orNull?.let { code.append("  #set strong(delta: ${it.repr()})\n") }
    subscript.typographic.orNull?.let { code.append("  #set sub(typographic: ${it.repr()})\n") }
    subscript.baseline.orNull?.let { code.append("  #set sub(baseline: ${it.repr()})\n") }
    subscript.size.orNull?.let { code.append("  #set sub(size: ${it.repr()})\n") }
    superscript.typographic.orNull?.let { code.append("  #set super(typographic: ${it.repr()})\n") }
    superscript.baseline.orNull?.let { code.append("  #set super(baseline: ${it.repr()})\n") }
    superscript.size.orNull?.let { code.append("  #set super(size: ${it.repr()})\n") }
    underline.stroke.orNull?.let { code.append("  #set underline(stroke: ${it.repr()})\n") }
    underline.offset.orNull?.let { code.append("  #set underline(offset: ${it.repr()})\n") }
    underline.extent.orNull?.let { code.append("  #set underline(extent: ${it.repr()})\n") }
    underline.evade.orNull?.let { code.append("  #set underline(evade: ${it.repr()})\n") }
    underline.background.orNull?.let { code.append("  #set underline(background: ${it.repr()})\n") }
    table.columns.orNull?.let { code.append("  #set table(columns: ${it.repr()})\n") }
    table.rows.orNull?.let { code.append("  #set table(rows: ${it.repr()})\n") }
    table.gutter.orNull?.let { code.append("  #set table(gutter: ${it.repr()})\n") }
    table.columnGutter.orNull?.let { code.append("  #set table(column-gutter: ${it.repr()})\n") }
    table.rowGutter.orNull?.let { code.append("  #set table(row-gutter: ${it.repr()})\n") }
    table.fill.orNull?.let { code.append("  #set table(fill: ${it.repr()})\n") }
    table.align.orNull?.let { code.append("  #set table(align: ${it.repr()})\n") }
    table.stroke.orNull?.let { code.append("  #set table(stroke: ${it.repr()})\n") }
    table.inset.orNull?.let { code.append("  #set table(inset: ${it.repr()})\n") }
    text.font.orNull?.let { code.append("  #set text(font: ${it.repr()})\n") }
    text.fallback.orNull?.let { code.append("  #set text(fallback: ${it.repr()})\n") }
    text.style.orNull?.let { code.append("  #set text(style: ${it.repr()})\n") }
    text.weight.orNull?.let { code.append("  #set text(weight: ${it.repr()})\n") }
    text.stretch.orNull?.let { code.append("  #set text(stretch: ${it.repr()})\n") }
    text.size.orNull?.let { code.append("  #set text(size: ${it.repr()})\n") }
    text.fill.orNull?.let { code.append("  #set text(fill: ${it.repr()})\n") }
    text.stroke.orNull?.let { code.append("  #set text(stroke: ${it.repr()})\n") }
    text.tracking.orNull?.let { code.append("  #set text(tracking: ${it.repr()})\n") }
    text.spacing.orNull?.let { code.append("  #set text(spacing: ${it.repr()})\n") }
    text.cjkLatinSpacing.orNull?.let { code.append("  #set text(cjk-latin-spacing: ${it.repr()})\n") }
    text.baseline.orNull?.let { code.append("  #set text(baseline: ${it.repr()})\n") }
    text.overhang.orNull?.let { code.append("  #set text(overhang: ${it.repr()})\n") }
    text.topEdge.orNull?.let { code.append("  #set text(top-edge: ${it.repr()})\n") }
    text.bottomEdge.orNull?.let { code.append("  #set text(bottom-edge: ${it.repr()})\n") }
    text.lang.orNull?.let { code.append("  #set text(lang: ${it.repr()})\n") }
    text.region.orNull?.let { code.append("  #set text(region: ${it.repr()})\n") }
    text.script.orNull?.let { code.append("  #set text(script: ${it.repr()})\n") }
    text.dir.orNull?.let { code.append("  #set text(dir: ${it.repr()})\n") }
    text.hyphenate.orNull?.let { code.append("  #set text(hyphenate: ${it.repr()})\n") }
    text.kerning.orNull?.let { code.append("  #set text(kerning: ${it.repr()})\n") }
    text.alternates.orNull?.let { code.append("  #set text(alternates: ${it.repr()})\n") }
    text.stylisticSet.orNull?.let { code.append("  #set text(stylistic-set: ${it.repr()})\n") }
    text.ligatures.orNull?.let { code.append("  #set text(ligatures: ${it.repr()})\n") }
    text.discretionaryLigatures.orNull?.let { code.append("  #set text(discretionary-ligatures: ${it.repr()})\n") }
    text.historicalLigatures.orNull?.let { code.append("  #set text(historical-ligatures: ${it.repr()})\n") }
    text.numberType.orNull?.let { code.append("  #set text(number-type: ${it.repr()})\n") }
    text.numberWidth.orNull?.let { code.append("  #set text(number-width: ${it.repr()})\n") }
    text.slashedZero.orNull?.let { code.append("  #set text(slashed-zero: ${it.repr()})\n") }
    text.fractions.orNull?.let { code.append("  #set text(fractions: ${it.repr()})\n") }
    text.features.orNull?.let { code.append("  #set text(features: ${it.repr()})\n") }
    list.tight.orNull?.let { code.append("  #set list(tight: ${it.repr()})\n") }
    list.marker.orNull?.let { code.append("  #set list(marker: ${it.repr()})\n") }
    list.indent.orNull?.let { code.append("  #set list(indent: ${it.repr()})\n") }
    list.bodyIndent.orNull?.let { code.append("  #set list(body-indent: ${it.repr()})\n") }
    list.spacing.orNull?.let { code.append("  #set list(spacing: ${it.repr()})\n") }
    terms.tight.orNull?.let { code.append("  #set terms(tight: ${it.repr()})\n") }
    terms.separator.orNull?.let { code.append("  #set terms(separator: ${it.repr()})\n") }
    terms.indent.orNull?.let { code.append("  #set terms(indent: ${it.repr()})\n") }
    terms.hangingIndent.orNull?.let { code.append("  #set terms(hanging-indent: ${it.repr()})\n") }
    terms.spacing.orNull?.let { code.append("  #set terms(spacing: ${it.repr()})\n") }
    enum.tight.orNull?.let { code.append("  #set enum(tight: ${it.repr()})\n") }
    enum.numbering.orNull?.let { code.append("  #set enum(numbering: ${it.repr()})\n") }
    enum.start.orNull?.let { code.append("  #set enum(start: ${it.repr()})\n") }
    enum.full.orNull?.let { code.append("  #set enum(full: ${it.repr()})\n") }
    enum.indent.orNull?.let { code.append("  #set enum(indent: ${it.repr()})\n") }
    enum.bodyIndent.orNull?.let { code.append("  #set enum(body-indent: ${it.repr()})\n") }
    enum.spacing.orNull?.let { code.append("  #set enum(spacing: ${it.repr()})\n") }
    enum.numberAlign.orNull?.let { code.append("  #set enum(number-align: ${it.repr()})\n") }
    document.title.orNull?.let { code.append("  #set document(title: ${it.repr()})\n") }
    document.author.orNull?.let { code.append("  #set document(author: ${it.repr()})\n") }
    document.keywords.orNull?.let { code.append("  #set document(keywords: ${it.repr()})\n") }
    document.date.orNull?.let { code.append("  #set document(date: ${it.repr()})\n") }
    math.accent.size.orNull?.let { code.append("  #set math.accent(size: ${it.repr()})\n") }
    math.attach.t.orNull?.let { code.append("  #set math.attach(t: ${it.repr()})\n") }
    math.attach.b.orNull?.let { code.append("  #set math.attach(b: ${it.repr()})\n") }
    math.attach.tl.orNull?.let { code.append("  #set math.attach(tl: ${it.repr()})\n") }
    math.attach.bl.orNull?.let { code.append("  #set math.attach(bl: ${it.repr()})\n") }
    math.attach.tr.orNull?.let { code.append("  #set math.attach(tr: ${it.repr()})\n") }
    math.attach.br.orNull?.let { code.append("  #set math.attach(br: ${it.repr()})\n") }
    math.cancel.length.orNull?.let { code.append("  #set math.cancel(length: ${it.repr()})\n") }
    math.cancel.inverted.orNull?.let { code.append("  #set math.cancel(inverted: ${it.repr()})\n") }
    math.cancel.cross.orNull?.let { code.append("  #set math.cancel(cross: ${it.repr()})\n") }
    math.cancel.angle.orNull?.let { code.append("  #set math.cancel(angle: ${it.repr()})\n") }
    math.cancel.stroke.orNull?.let { code.append("  #set math.cancel(stroke: ${it.repr()})\n") }
    math.cases.delim.orNull?.let { code.append("  #set math.cases(delim: ${it.repr()})\n") }
    math.cases.reverse.orNull?.let { code.append("  #set math.cases(reverse: ${it.repr()})\n") }
    math.cases.gap.orNull?.let { code.append("  #set math.cases(gap: ${it.repr()})\n") }
    math.equation.block.orNull?.let { code.append("  #set math.equation(block: ${it.repr()})\n") }
    math.equation.numbering.orNull?.let { code.append("  #set math.equation(numbering: ${it.repr()})\n") }
    math.equation.numberAlign.orNull?.let { code.append("  #set math.equation(number-align: ${it.repr()})\n") }
    math.equation.supplement.orNull?.let { code.append("  #set math.equation(supplement: ${it.repr()})\n") }
    math.lr.size.orNull?.let { code.append("  #set math.lr(size: ${it.repr()})\n") }
    math.mat.delim.orNull?.let { code.append("  #set math.mat(delim: ${it.repr()})\n") }
    math.mat.augment.orNull?.let { code.append("  #set math.mat(augment: ${it.repr()})\n") }
    math.mat.gap.orNull?.let { code.append("  #set math.mat(gap: ${it.repr()})\n") }
    math.mat.rowGap.orNull?.let { code.append("  #set math.mat(row-gap: ${it.repr()})\n") }
    math.mat.columnGap.orNull?.let { code.append("  #set math.mat(column-gap: ${it.repr()})\n") }
    math.root.index.orNull?.let { code.append("  #set math.root(index: ${it.repr()})\n") }
    math.underbrace.annotation.orNull?.let { code.append("  #set math.underbrace(annotation: ${it.repr()})\n") }
    math.overbrace.annotation.orNull?.let { code.append("  #set math.overbrace(annotation: ${it.repr()})\n") }
    math.underbracket.annotation.orNull?.let { code.append("  #set math.underbracket(annotation: ${it.repr()})\n") }
    math.overbracket.annotation.orNull?.let { code.append("  #set math.overbracket(annotation: ${it.repr()})\n") }
    math.vec.delim.orNull?.let { code.append("  #set math.vec(delim: ${it.repr()})\n") }
    math.vec.gap.orNull?.let { code.append("  #set math.vec(gap: ${it.repr()})\n") }
    align.alignment.orNull?.let { code.append("  #set align(alignment: ${it.repr()})\n") }
    block.width.orNull?.let { code.append("  #set block(width: ${it.repr()})\n") }
    block.height.orNull?.let { code.append("  #set block(height: ${it.repr()})\n") }
    block.breakable.orNull?.let { code.append("  #set block(breakable: ${it.repr()})\n") }
    block.fill.orNull?.let { code.append("  #set block(fill: ${it.repr()})\n") }
    block.stroke.orNull?.let { code.append("  #set block(stroke: ${it.repr()})\n") }
    block.radius.orNull?.let { code.append("  #set block(radius: ${it.repr()})\n") }
    block.inset.orNull?.let { code.append("  #set block(inset: ${it.repr()})\n") }
    block.outset.orNull?.let { code.append("  #set block(outset: ${it.repr()})\n") }
    block.spacing.orNull?.let { code.append("  #set block(spacing: ${it.repr()})\n") }
    block.above.orNull?.let { code.append("  #set block(above: ${it.repr()})\n") }
    block.below.orNull?.let { code.append("  #set block(below: ${it.repr()})\n") }
    block.clip.orNull?.let { code.append("  #set block(clip: ${it.repr()})\n") }
    block.body.orNull?.let { code.append("  #set block(body: ${it.repr()})\n") }
    box.width.orNull?.let { code.append("  #set box(width: ${it.repr()})\n") }
    box.height.orNull?.let { code.append("  #set box(height: ${it.repr()})\n") }
    box.baseline.orNull?.let { code.append("  #set box(baseline: ${it.repr()})\n") }
    box.fill.orNull?.let { code.append("  #set box(fill: ${it.repr()})\n") }
    box.stroke.orNull?.let { code.append("  #set box(stroke: ${it.repr()})\n") }
    box.radius.orNull?.let { code.append("  #set box(radius: ${it.repr()})\n") }
    box.inset.orNull?.let { code.append("  #set box(inset: ${it.repr()})\n") }
    box.outset.orNull?.let { code.append("  #set box(outset: ${it.repr()})\n") }
    box.clip.orNull?.let { code.append("  #set box(clip: ${it.repr()})\n") }
    box.body.orNull?.let { code.append("  #set box(body: ${it.repr()})\n") }
    colbreak.weak.orNull?.let { code.append("  #set colbreak(weak: ${it.repr()})\n") }
    columns.count.orNull?.let { code.append("  #set columns(count: ${it.repr()})\n") }
    columns.gutter.orNull?.let { code.append("  #set columns(gutter: ${it.repr()})\n") }
    grid.columns.orNull?.let { code.append("  #set grid(columns: ${it.repr()})\n") }
    grid.rows.orNull?.let { code.append("  #set grid(rows: ${it.repr()})\n") }
    grid.gutter.orNull?.let { code.append("  #set grid(gutter: ${it.repr()})\n") }
    grid.columnGutter.orNull?.let { code.append("  #set grid(column-gutter: ${it.repr()})\n") }
    grid.rowGutter.orNull?.let { code.append("  #set grid(row-gutter: ${it.repr()})\n") }
    grid.fill.orNull?.let { code.append("  #set grid(fill: ${it.repr()})\n") }
    grid.align.orNull?.let { code.append("  #set grid(align: ${it.repr()})\n") }
    grid.stroke.orNull?.let { code.append("  #set grid(stroke: ${it.repr()})\n") }
    grid.inset.orNull?.let { code.append("  #set grid(inset: ${it.repr()})\n") }
    grid.cell.x.orNull?.let { code.append("  #set grid.cell(x: ${it.repr()})\n") }
    grid.cell.y.orNull?.let { code.append("  #set grid.cell(y: ${it.repr()})\n") }
    grid.cell.colspan.orNull?.let { code.append("  #set grid.cell(colspan: ${it.repr()})\n") }
    grid.cell.rowspan.orNull?.let { code.append("  #set grid.cell(rowspan: ${it.repr()})\n") }
    grid.cell.fill.orNull?.let { code.append("  #set grid.cell(fill: ${it.repr()})\n") }
    grid.cell.align.orNull?.let { code.append("  #set grid.cell(align: ${it.repr()})\n") }
    grid.cell.inset.orNull?.let { code.append("  #set grid.cell(inset: ${it.repr()})\n") }
    grid.cell.stroke.orNull?.let { code.append("  #set grid.cell(stroke: ${it.repr()})\n") }
    grid.cell.breakable.orNull?.let { code.append("  #set grid.cell(breakable: ${it.repr()})\n") }
    grid.hline.y.orNull?.let { code.append("  #set grid.hline(y: ${it.repr()})\n") }
    grid.hline.start.orNull?.let { code.append("  #set grid.hline(start: ${it.repr()})\n") }
    grid.hline.end.orNull?.let { code.append("  #set grid.hline(end: ${it.repr()})\n") }
    grid.hline.stroke.orNull?.let { code.append("  #set grid.hline(stroke: ${it.repr()})\n") }
    grid.hline.position.orNull?.let { code.append("  #set grid.hline(position: ${it.repr()})\n") }
    grid.vline.x.orNull?.let { code.append("  #set grid.vline(x: ${it.repr()})\n") }
    grid.vline.start.orNull?.let { code.append("  #set grid.vline(start: ${it.repr()})\n") }
    grid.vline.end.orNull?.let { code.append("  #set grid.vline(end: ${it.repr()})\n") }
    grid.vline.stroke.orNull?.let { code.append("  #set grid.vline(stroke: ${it.repr()})\n") }
    grid.vline.position.orNull?.let { code.append("  #set grid.vline(position: ${it.repr()})\n") }
    grid.header.repeat.orNull?.let { code.append("  #set grid.header(repeat: ${it.repr()})\n") }
    grid.footer.repeat.orNull?.let { code.append("  #set grid.footer(repeat: ${it.repr()})\n") }
    move.dx.orNull?.let { code.append("  #set move(dx: ${it.repr()})\n") }
    move.dy.orNull?.let { code.append("  #set move(dy: ${it.repr()})\n") }
    pad.left.orNull?.let { code.append("  #set pad(left: ${it.repr()})\n") }
    pad.top.orNull?.let { code.append("  #set pad(top: ${it.repr()})\n") }
    pad.right.orNull?.let { code.append("  #set pad(right: ${it.repr()})\n") }
    pad.bottom.orNull?.let { code.append("  #set pad(bottom: ${it.repr()})\n") }
    pad.x.orNull?.let { code.append("  #set pad(x: ${it.repr()})\n") }
    pad.y.orNull?.let { code.append("  #set pad(y: ${it.repr()})\n") }
    pad.rest.orNull?.let { code.append("  #set pad(rest: ${it.repr()})\n") }
    page.paper.orNull?.let { code.append("  #set page(paper: ${it.repr()})\n") }
    page.width.orNull?.let { code.append("  #set page(width: ${it.repr()})\n") }
    page.height.orNull?.let { code.append("  #set page(height: ${it.repr()})\n") }
    page.flipped.orNull?.let { code.append("  #set page(flipped: ${it.repr()})\n") }
    page.margin.orNull?.let { code.append("  #set page(margin: ${it.repr()})\n") }
    page.binding.orNull?.let { code.append("  #set page(binding: ${it.repr()})\n") }
    page.columns.orNull?.let { code.append("  #set page(columns: ${it.repr()})\n") }
    page.fill.orNull?.let { code.append("  #set page(fill: ${it.repr()})\n") }
    page.numbering.orNull?.let { code.append("  #set page(numbering: ${it.repr()})\n") }
    page.numberAlign.orNull?.let { code.append("  #set page(number-align: ${it.repr()})\n") }
    page.header.orNull?.let { code.append("  #set page(header: ${it.repr()})\n") }
    page.headerAscent.orNull?.let { code.append("  #set page(header-ascent: ${it.repr()})\n") }
    page.footer.orNull?.let { code.append("  #set page(footer: ${it.repr()})\n") }
    page.footerDescent.orNull?.let { code.append("  #set page(footer-descent: ${it.repr()})\n") }
    page.background.orNull?.let { code.append("  #set page(background: ${it.repr()})\n") }
    page.foreground.orNull?.let { code.append("  #set page(foreground: ${it.repr()})\n") }
    place.alignment.orNull?.let { code.append("  #set place(alignment: ${it.repr()})\n") }
    place.float.orNull?.let { code.append("  #set place(float: ${it.repr()})\n") }
    place.clearance.orNull?.let { code.append("  #set place(clearance: ${it.repr()})\n") }
    place.dx.orNull?.let { code.append("  #set place(dx: ${it.repr()})\n") }
    place.dy.orNull?.let { code.append("  #set place(dy: ${it.repr()})\n") }
    rotate.pos.orNull?.let { code.append("  #set rotate(pos: ${it.repr()})\n") }
    rotate.origin.orNull?.let { code.append("  #set rotate(origin: ${it.repr()})\n") }
    rotate.reflow.orNull?.let { code.append("  #set rotate(reflow: ${it.repr()})\n") }
    scale.x.orNull?.let { code.append("  #set scale(x: ${it.repr()})\n") }
    scale.y.orNull?.let { code.append("  #set scale(y: ${it.repr()})\n") }
    scale.origin.orNull?.let { code.append("  #set scale(origin: ${it.repr()})\n") }
    scale.reflow.orNull?.let { code.append("  #set scale(reflow: ${it.repr()})\n") }
    stack.dir.orNull?.let { code.append("  #set stack(dir: ${it.repr()})\n") }
    stack.spacing.orNull?.let { code.append("  #set stack(spacing: ${it.repr()})\n") }
    image.format.orNull?.let { code.append("  #set image(format: ${it.repr()})\n") }
    image.width.orNull?.let { code.append("  #set image(width: ${it.repr()})\n") }
    image.height.orNull?.let { code.append("  #set image(height: ${it.repr()})\n") }
    image.alt.orNull?.let { code.append("  #set image(alt: ${it.repr()})\n") }
    image.fit.orNull?.let { code.append("  #set image(fit: ${it.repr()})\n") }
    line.start.orNull?.let { code.append("  #set line(start: ${it.repr()})\n") }
    line.end.orNull?.let { code.append("  #set line(end: ${it.repr()})\n") }
    line.length.orNull?.let { code.append("  #set line(length: ${it.repr()})\n") }
    line.angle.orNull?.let { code.append("  #set line(angle: ${it.repr()})\n") }
    line.stroke.orNull?.let { code.append("  #set line(stroke: ${it.repr()})\n") }
    circle.radius.orNull?.let { code.append("  #set circle(radius: ${it.repr()})\n") }
    circle.width.orNull?.let { code.append("  #set circle(width: ${it.repr()})\n") }
    circle.height.orNull?.let { code.append("  #set circle(height: ${it.repr()})\n") }
    circle.fill.orNull?.let { code.append("  #set circle(fill: ${it.repr()})\n") }
    circle.stroke.orNull?.let { code.append("  #set circle(stroke: ${it.repr()})\n") }
    circle.inset.orNull?.let { code.append("  #set circle(inset: ${it.repr()})\n") }
    circle.outset.orNull?.let { code.append("  #set circle(outset: ${it.repr()})\n") }
    circle.body.orNull?.let { code.append("  #set circle(body: ${it.repr()})\n") }
    ellipse.width.orNull?.let { code.append("  #set ellipse(width: ${it.repr()})\n") }
    ellipse.height.orNull?.let { code.append("  #set ellipse(height: ${it.repr()})\n") }
    ellipse.fill.orNull?.let { code.append("  #set ellipse(fill: ${it.repr()})\n") }
    ellipse.stroke.orNull?.let { code.append("  #set ellipse(stroke: ${it.repr()})\n") }
    ellipse.inset.orNull?.let { code.append("  #set ellipse(inset: ${it.repr()})\n") }
    ellipse.outset.orNull?.let { code.append("  #set ellipse(outset: ${it.repr()})\n") }
    ellipse.body.orNull?.let { code.append("  #set ellipse(body: ${it.repr()})\n") }
    path.fill.orNull?.let { code.append("  #set path(fill: ${it.repr()})\n") }
    path.stroke.orNull?.let { code.append("  #set path(stroke: ${it.repr()})\n") }
    path.closed.orNull?.let { code.append("  #set path(closed: ${it.repr()})\n") }
    path.vertices.orNull?.let { code.append("  #set path(vertices: ${it.repr()})\n") }
    polygon.fill.orNull?.let { code.append("  #set polygon(fill: ${it.repr()})\n") }
    polygon.stroke.orNull?.let { code.append("  #set polygon(stroke: ${it.repr()})\n") }
    rect.width.orNull?.let { code.append("  #set rect(width: ${it.repr()})\n") }
    rect.height.orNull?.let { code.append("  #set rect(height: ${it.repr()})\n") }
    rect.fill.orNull?.let { code.append("  #set rect(fill: ${it.repr()})\n") }
    rect.stroke.orNull?.let { code.append("  #set rect(stroke: ${it.repr()})\n") }
    rect.radius.orNull?.let { code.append("  #set rect(radius: ${it.repr()})\n") }
    rect.inset.orNull?.let { code.append("  #set rect(inset: ${it.repr()})\n") }
    rect.outset.orNull?.let { code.append("  #set rect(outset: ${it.repr()})\n") }
    rect.body.orNull?.let { code.append("  #set rect(body: ${it.repr()})\n") }
    square.size.orNull?.let { code.append("  #set square(size: ${it.repr()})\n") }
    square.width.orNull?.let { code.append("  #set square(width: ${it.repr()})\n") }
    square.height.orNull?.let { code.append("  #set square(height: ${it.repr()})\n") }
    square.fill.orNull?.let { code.append("  #set square(fill: ${it.repr()})\n") }
    square.stroke.orNull?.let { code.append("  #set square(stroke: ${it.repr()})\n") }
    square.radius.orNull?.let { code.append("  #set square(radius: ${it.repr()})\n") }
    square.inset.orNull?.let { code.append("  #set square(inset: ${it.repr()})\n") }
    square.outset.orNull?.let { code.append("  #set square(outset: ${it.repr()})\n") }
    square.body.orNull?.let { code.append("  #set square(body: ${it.repr()})\n") }
    code.append("  #body\n")
    code.append("]\n")
    return code.toString()
}

private fun <E:TValue> List<E>.repr() = TArray(this).repr()
